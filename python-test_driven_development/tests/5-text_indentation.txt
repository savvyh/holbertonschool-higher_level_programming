------------------------------------------------
# doctest 5-text_indentation.py
------------------------------------------------
>>> text_indentation = __import__('5-text_indentation').text_indentation

Argument is a float:
>>> text_indentation(1.24)
Traceback (most recent call last):
TypeError: text must be a string

Argument is a tuple:
>>> text_indentation((1, 2.2, 3))
Traceback (most recent call last):
TypeError: text must be a string

Argument is a list of string:
>>> text_indentation(["This", "is", "list", "."])
Traceback (most recent call last):
TypeError: text must be a string

Test with a boolean argument:
>>> text_indentation(True)
Traceback (most recent call last):
TypeError: text must be a string

Test with a None argument:
>>> text_indentation(None)
Traceback (most recent call last):
TypeError: text must be a string

Test with a empty string:
>>> text_indentation("")
 

Test a string without the special characters:
>>> text_indentation("This string has no special indentation characters!")
This string has no special indentation characters!

Test a string with multiple special characters:
>>> text_indentation("This is a long sentence. It contains multiple special characters: ?, !, and .")
This is a long sentence.
<BLANKLINE>
It contains multiple special characters:
<BLANKLINE>
?
<BLANKLINE>
, !, and .
<BLANKLINE>

Test a string with multiple space and with characters:
>>> text_indentation("   Testing printing text with leading whitespace.")
Testing printing text with leading whitespace.
<BLANKLINE>

Test a string with multiple space and without characters:
>>> text_indentation("   Testing printing text with leading whitespace")
Testing printing text with leading whitespace.

Test a string with multiple trailing spaces and characters:
>>> text_indentation("Testing printing text with multiple trailing spaces?.  ")
Testing printing text with multiple trailing spaces?
<BLANKLINE>
.
<BLANKLINE>
