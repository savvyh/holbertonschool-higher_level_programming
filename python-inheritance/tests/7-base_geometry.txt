============================================================
doctest of the function integer_validator
============================================================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> try:
...     bg.area()
... except Exception as e:
...     print(e)
area() is not implemented

>>> bg.integer_validator("width", -4)
Traceback (most recent call last):
...
ValueError: width must be greater than 0

>>> bg.integer_validator("width", "test")
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("bonjour", 0)
Traceback (most recent call last):
...
ValueError: bonjour must be greater than 0

>>> bg.integer_validator("hello")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator(1, 2, 3)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> try:
...     bg.integer_validator("x", 1)
... except Exception as e:
...     print(e)

>>> bg.integer_validator(1)
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> try:
...     bg.integer_validator("age", 3.5)
... except Exception as e:
...     print(e)
age must be an integer

>>> try:
...     bg.integer_validator("x", 0)
... except Exception as e:
...     print(e)
x must be greater than 0

>>> try:
...     bg.integer_validator("x", -2)
... except Exception as e:
...     print(e)
x must be greater than 0

>>> try:
...     bg.integer_validator("x", 1)
... except Exception as e:
...     print(e)

>>> try:
...     bg.integer_validator(None, None)
... except Exception as e:
...     print(e)
None must be an integer
